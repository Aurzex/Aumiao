name: Code Quality Automation

on:
  push:
    branches: [main]
    paths:
      - ".github/workflows/ci.yml"
      - "Aumiao-py/src/**/*.py"
  pull_request:
    branches: [main]
    paths:
      - ".github/workflows/ci.yml"
      - "Aumiao-py/src/**/*.py"
  workflow_dispatch:

jobs:
  commitlint:
    name: Check Commit Messages
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整commit历史

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install and Run Commitlint
        run: |
          npm install -g @commitlint/cli @commitlint/config-conventional
          # 检查当前PR的所有commit
          npx commitlint --from origin/${{ github.base_ref }} --to HEAD --verbose

  code-styling:
    name: "Lint & Format"
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Run Ruff Linter
        uses: astral-sh/ruff-action@v3
        with:
          version: "latest"
          args: "check --fix --preview --output-format=github"
          src: "./Aumiao-py/src"

      - name: Run Ruff (Lint + Format)
        uses: astral-sh/ruff-action@v3
        with:
          version: "latest"
          args: "check --fix --preview --output-format=github && ruff format"
          src: "./Aumiao-py/src"

  spell-check:
    name: "Spell Check"
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Validate Spelling
        uses: crate-ci/typos@v1.32.0
        with:
          config: ./Aumiao-py/typos.toml
          files: ./Aumiao-py/src

  apply-fixes:
    name: "Apply Fixes"
    needs: [code-styling, spell-check]
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: github.event_name == 'pull_request'  # 仅在PR场景应用修复
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Detect Changes
        id: check-changes
        run: |
          git add -A
          if ! git diff --quiet --staged; then
            echo "HAS_CHANGES=true" >> $GITHUB_ENV
          fi

      - name: Commit and Push Fixes
        if: env.HAS_CHANGES == 'true'
        run: |
          git config --global user.name "Code Quality Bot"
          git config --global user.email "bot@aumiao-py"
          git commit -m "style: Automated code quality fixes (ruff+typos)" --allow-empty
          git push origin HEAD:${{ github.head_ref }}