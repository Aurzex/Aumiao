name: Build and Package with Nuitka

permissions:
  contents: write
  actions: write

on:
  push:
    branches: [main]
    paths:
      - ".github/workflows/build.yml"
      - "Aumiao-py/src/**/*.py"
      - "Aumiao-py/pyproject.toml"
  pull_request:
    branches: [main]
    paths:
      - ".github/workflows/build.yml"
      - "Aumiao-py/src/**/*.py"
      - "Aumiao-py/pyproject.toml"
  workflow_dispatch:

env:
  BUILD_TYPE: Release
  COMMIT_INTERVAL: 20
  PYTHON_VERSION: "3.13"
  UPX_VERSION: "5.0.2"
  UV_VERSION: "0.9.3"

jobs:
  check-release-condition:
    name: "Check Release Condition"
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.check-commits.outputs.should_release }}
      release_tag: ${{ steps.check-commits.outputs.release_tag }}
      commit_count: ${{ steps.check-commits.outputs.commit_count }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check Commit Count and Create Release
        id: check-commits
        run: |
          if git describe --tags --abbrev=0 > /dev/null 2>&1; then
            LATEST_TAG=$(git describe --tags --abbrev=0)
            echo "Latest tag: $LATEST_TAG"
            COMMIT_COUNT=$(git rev-list --count $LATEST_TAG..HEAD)
          else
            echo "No tags found, counting all commits"
            LATEST_TAG="initial"
            COMMIT_COUNT=$(git rev-list --count HEAD)
          fi
          
          echo "Commits since last tag: $COMMIT_COUNT"
          echo "commit_count=$COMMIT_COUNT" >> $GITHUB_OUTPUT
          
          if [ $COMMIT_COUNT -ge ${{ env.COMMIT_INTERVAL }} ]; then
            echo "Reached $COMMIT_COUNT commits (>= ${{ env.COMMIT_INTERVAL }}), triggering release"
            echo "should_release=true" >> $GITHUB_OUTPUT
            
            RELEASE_TAG="v$(date +'%Y%m%d.%H%M%S')"
            echo "release_tag=$RELEASE_TAG" >> $GITHUB_OUTPUT
            
            # 只在满足条件时创建标签
            git tag $RELEASE_TAG
            git push origin $RELEASE_TAG
            echo "Created and pushed tag: $RELEASE_TAG"
          else
            echo "Only $COMMIT_COUNT commits (< ${{ env.COMMIT_INTERVAL }}), skipping release"
            echo "should_release=false" >> $GITHUB_OUTPUT
            echo "release_tag=" >> $GITHUB_OUTPUT
          fi

  generate-changelog:
    name: "Generate Changelog"
    runs-on: ubuntu-latest
    needs: check-release-condition
    if: needs.check-release-condition.outputs.should_release == 'true'
    outputs:
      release_body: ${{ steps.git-cliff.outputs.content }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate Changelog with git-cliff
        uses: orhun/git-cliff-action@v4
        id: git-cliff
        with:
          config: ./Aumiao-py/cliff.toml
          args: -vv --latest --strip header
        env:
          OUTPUT: CHANGES.md

      - name: Display Changelog Summary
        run: |
          echo "Generated changelog:"
          head -20 CHANGES.md

  build-application:
    name: "Build Application"
    permissions:
      contents: write
      actions: write
    runs-on: windows-latest
    timeout-minutes: 30
    needs: check-release-condition
    
    env:
      UV_CACHE_DIR: ${{ github.workspace }}/.uv-cache

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Build Environment
        id: setup-env
        shell: bash
        run: |
          echo "BUILD_DATE=$(TZ=Asia/Shanghai date +'%y%m%d')" >> $GITHUB_ENV
          echo "BUILD_TIME=$(TZ=Asia/Shanghai date +'%H%M%S')" >> $GITHUB_ENV
          echo "GIT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          echo "SHOULD_RELEASE=${{ needs.check-release-condition.outputs.should_release }}" >> $GITHUB_ENV
          echo "RELEASE_TAG=${{ needs.check-release-condition.outputs.release_tag }}" >> $GITHUB_ENV
          echo "COMMIT_COUNT=${{ needs.check-release-condition.outputs.commit_count }}" >> $GITHUB_ENV
          echo "BUILD_DATE=$(TZ=Asia/Shanghai date +'%y%m%d')" >> $GITHUB_OUTPUT

      - name: Read Project Version
        id: version
        shell: pwsh
        run: |
          $tomlContent = Get-Content -Path ./Aumiao-py/pyproject.toml -Raw -Encoding UTF8
          $versionLine = $tomlContent | Select-String -Pattern 'version\s*=\s*"([\d.]+)"'
          if ($versionLine) {
              $version = $versionLine.Matches.Groups[1].Value
              Write-Host "Extracted version: $version"
              Write-Output "PROJECT_VERSION=$version" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
          } else {
              Write-Error "Version not found in pyproject.toml"
              exit 1
          }

      - name: Install uv and Python
        uses: astral-sh/setup-uv@v6
        with:
          version: ${{ env.UV_VERSION }}
          enable-cache: true
          cache-dependency-glob: |
            Aumiao-py/pyproject.toml
            Aumiao-py/uv.lock

      - name: Set up Python
        run: uv python install ${{ env.PYTHON_VERSION }}

      - name: Cache Build Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.UV_CACHE_DIR }}
            upx.exe
          key: ${{ runner.os }}-py${{ env.PYTHON_VERSION }}-uv-${{ env.UV_VERSION }}-${{ hashFiles('Aumiao-py/pyproject.toml', 'Aumiao-py/uv.lock') }}
          restore-keys: |
            ${{ runner.os }}-py${{ env.PYTHON_VERSION }}-uv-${{ env.UV_VERSION }}-

      - name: Install Build Tools
        shell: pwsh
        run: |
          $ProgressPreference = 'SilentlyContinue'
          Invoke-WebRequest -Uri "https://www.7-zip.org/a/7z2409-x64.msi" -OutFile "7z-installer.msi"
          Start-Process msiexec.exe -ArgumentList "/i 7z-installer.msi /quiet" -Wait
          "C:\Program Files\7-Zip" | Out-File -FilePath $env:GITHUB_PATH -Append -Encoding utf8

          Invoke-WebRequest -Uri "https://files.jrsoftware.org/is/6/innosetup-6.5.0.exe" -OutFile "innosetup.exe"
          Start-Process -FilePath "innosetup.exe" -ArgumentList "/VERYSILENT /SUPPRESSMSGBOXES /NORESTART" -Wait
          "C:\Program Files (x86)\Inno Setup 6" | Out-File -FilePath $env:GITHUB_PATH -Append -Encoding utf8
          Remove-Item "innosetup.exe" -Force

      - name: Install Project Dependencies
        working-directory: ./Aumiao-py
        run: |
          uv lock
          uv sync --all-extras --dev
          uv pip install nuitka

      - name: Build with Nuitka
        working-directory: ./Aumiao-py
        run: |
          uv run python -m nuitka `
            --assume-yes-for-downloads `
            --company-name="Aumiao Team" `
            --copyright="Copyright © 2025 喵鱼a. All rights reserved." `
            --file-version="${{ env.PROJECT_VERSION }}" `
            --follow-imports `
            --jobs=4 `
            --lto=yes `
            --mode=standalone `
            --output-dir=../build `
            --output-filename=aumiao `
            --product-name="Aumiao" `
            --product-version="${{ env.PROJECT_VERSION }}" `
            --show-progress `
            --windows-console-mode=force `
            --windows-icon-from-ico="./resource/icons/favicon.ico" `
            ./main.py

      - name: Run Recovery Script
        working-directory: ./Aumiao-py
        run: uv run python recover.py

      - name: Prepare Distribution Files
        shell: pwsh
        run: |
          $distDir = "build/main.dist"
          New-Item -Path "$distDir/.log" -ItemType Directory -Force
          $essentialFiles = @(
              "./Aumiao-py/README.md",
              "./Aumiao-py/DISCLAIMER.txt",
              "./Aumiao-py/data"
          )
          Copy-Item -Path $essentialFiles -Destination $distDir -Recurse -Force
          
          $versionInfo = @{
              Version = "${{ env.PROJECT_VERSION }}"
              BuildDate = "${{ env.BUILD_DATE }}"
              GitCommit = "${{ env.GIT_SHA }}"
              ReleaseTag = "${{ env.RELEASE_TAG }}"
              CommitCount = "${{ env.COMMIT_COUNT }}"
          } | ConvertTo-Json
          Set-Content -Path "$distDir/version.json" -Value $versionInfo

      - name: Optimize Binaries with UPX
        shell: pwsh
        continue-on-error: true
        run: |
          if (-not (Test-Path "./upx.exe")) {
              $ProgressPreference = 'SilentlyContinue'
              Invoke-WebRequest "https://github.com/upx/upx/releases/download/v${{ env.UPX_VERSION }}/upx-${{ env.UPX_VERSION }}-win64.zip" -OutFile upx.zip
              Expand-Archive upx.zip -DestinationPath upx_tmp
              Move-Item upx_tmp/upx*/upx.exe . -ErrorAction SilentlyContinue
              Remove-Item upx_tmp, upx.zip -Recurse -Force
          }
          ./upx.exe --best --lzma ./build/main.dist/aumiao.exe 2>&1 | Out-Null

      - name: Create Portable Zip Package
        shell: pwsh
        run: |
          $packageName = "Aumiao_Portable_v${{ env.PROJECT_VERSION }}.${{ env.BUILD_DATE }}.zip"
          7z a -tzip "build/$packageName" "build/main.dist/*"
          Write-Host "Created portable package: $packageName"

      - name: Build Installer
        shell: pwsh
        run: |
          ISCC.exe ./Aumiao-py/resource/aumiao.iss
          Write-Host "Installer built successfully"

      - name: Upload Portable Package to Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Aumiao-Portable-${{ env.BUILD_DATE }}
          path: build/*.zip
          retention-days: 30

      - name: Minimize UV Cache
        run: uv cache prune --ci

    outputs:
      build_date: ${{ steps.setup-env.outputs.BUILD_DATE }}

  publish-release:
    name: "Publish Release"
    runs-on: ubuntu-latest
    needs: [check-release-condition, generate-changelog, build-application]
    if: needs.check-release-condition.outputs.should_release == 'true'
    permissions:
      contents: write
    steps:
      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: Aumiao-Portable-${{ needs.build-application.outputs.build_date }}
          path: ./release-assets

      - name: Upload Installer to Release
        run: |
          mkdir -p ./release-assets
          cp ./Aumiao-py/build/installer/*.exe ./release-assets/ 2>/dev/null || echo "Installer not found, continuing..."

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.check-release-condition.outputs.release_tag }}
          name: "Aumiao ${{ needs.check-release-condition.outputs.release_tag }}"
          body: ${{ needs.generate-changelog.outputs.release_body }}
          files: |
            ./release-assets/*
          draft: false
          prerelease: false  # 改为正式发布

  upload-debug-files:
    name: "Upload Debug Files"
    runs-on: windows-latest
    needs: build-application
    if: always()
    steps:
      - name: Upload Build Logs
        uses: actions/upload-artifact@v4
        with:
          name: Build-Debug-Logs-${{ needs.build-application.outputs.build_date }}
          path: |
            build/**/*.log
            build/**/*.json
            **/nuitka-*.log
          if-no-files-found: ignore
          retention-days: 14