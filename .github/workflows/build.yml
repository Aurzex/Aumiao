name: Build and Package with Nuitka

permissions:
  contents: read
  actions: write

on:
  push:
    branches: [main]
    paths:
      - ".github/workflows/build.yml"
      - "Aumiao-py/src/**/*.py"
      - "Aumiao-py/pyproject.toml"
  pull_request:
    branches: [main]
    paths:
      - ".github/workflows/build.yml"
      - "Aumiao-py/src/**/*.py"
      - "Aumiao-py/pyproject.toml"
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.13"
  UPX_VERSION: "4.2.4"
  BUILD_TYPE: Release

jobs:
  build:
    permissions:
      contents: read
      actions: write
    runs-on: windows-latest
    timeout-minutes: 30

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Beijing Timezone
        shell: bash
        run: |
          echo "BUILD_DATE=$(TZ=Asia/Shanghai date +'%y%m%d')" >> $GITHUB_ENV
          echo "BUILD_TIME=$(TZ=Asia/Shanghai date +'%H%M%S')" >> $GITHUB_ENV
          echo "GIT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Read Project Version
        id: version
        shell: pwsh
        run: |
          # 从pyproject.toml中提取版本号
          $tomlContent = Get-Content -Path ./Aumiao-py/pyproject.toml -Raw -Encoding UTF8
          Write-Host "TOML content: $tomlContent"

          $versionLine = $tomlContent | Select-String -Pattern 'version\s*=\s*"([\d.]+)"'
          if ($versionLine) {
              $version = $versionLine.Matches.Groups[1].Value
              Write-Host "Extracted version: $version"
              
              # 正确设置环境变量
              Write-Output "PROJECT_VERSION=$version" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
          } else {
              Write-Error "Version not found in pyproject.toml"
              exit 1
          }

      - name: Verify Version Extraction
        shell: pwsh
        run: |
          Write-Host "PROJECT_VERSION = $env:PROJECT_VERSION"
          Write-Host "GITHUB_ENV content:"
          if (Test-Path $env:GITHUB_ENV) {
              Get-Content $env:GITHUB_ENV
          } else {
              Write-Host "GITHUB_ENV file not found"
          }

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          architecture: "x64"
          cache: "pip"

      - name: Cache Dependencies
        uses: actions/cache@v4
        with:
          path: |
            .venv
            ~/.cache/pip
            ~/.cache/uv
            upx.exe
          key: ${{ runner.os }}-py${{ env.PYTHON_VERSION }}-${{ hashFiles('**/requirements.txt') }}-upx-${{ env.UPX_VERSION }}
          restore-keys: |
            ${{ runner.os }}-py${{ env.PYTHON_VERSION }}-

      - name: Install 7-Zip
        shell: pwsh
        run: |
          $ProgressPreference = 'SilentlyContinue'
          Invoke-WebRequest -Uri "https://www.7-zip.org/a/7z2409-x64.msi" -OutFile "7z-installer.msi"
          Start-Process msiexec.exe -ArgumentList "/i 7z-installer.msi /quiet" -Wait
          $sevenZipPath = "C:\Program Files\7-Zip"
          if (Test-Path $sevenZipPath) {
              "$sevenZipPath" | Out-File -FilePath $env:GITHUB_PATH -Append -Encoding utf8
              $env:PATH += ";$sevenZipPath"
          } else {
              Write-Error "7-Zip installation failed!"
              exit 1
          }

      - name: Setup Python Environment
        shell: pwsh
        run: |
          python -m venv .venv
          .\.venv\Scripts\activate
          python -m pip install --upgrade pip
          pip install uv
          uv pip install --system -r ./Aumiao-py/requirements.in
          pip list

      - name: Build with Nuitka
        uses: Nuitka/Nuitka-Action@main
        with:
          assume-yes-for-downloads: true
          company-name: "Aumiao Team"
          copyright: "Copyright © 2025 喵鱼a. All rights reserved."
          file-version: ${{ env.PROJECT_VERSION || '2.0.0' }}
          follow-imports: true
          jobs: 4
          lto: "yes"
          mode: standalone
          output-dir: build
          output-filename: aumiao
          product-name: "Aumiao"
          product-version: ${{ env.PROJECT_VERSION || '2.0.0' }}
          script-name: ./Aumiao-py/main.py
          show-progress: true
          windows-console-mode: force
          windows-icon-from-ico: "./Aumiao-py/src/project/favicon.ico"

      - name: Run recover.py
        shell: pwsh
        run: |
          .\.venv\Scripts\activate
          python ./Aumiao-py/recover.py

      - name: Prepare Distribution
        shell: pwsh
        run: |
          $distDir = "build/main.dist"
          New-Item -Path "$distDir/.log" -ItemType Directory -Force
          $essentialFiles = @(
              "./Aumiao-py/README.txt",
              "./Aumiao-py/DISCLAIMER.txt",
              "./Aumiao-py/data"
          )
          Copy-Item -Path $essentialFiles -Destination $distDir -Recurse -Force
          $versionInfo = @{
              Version   = "${{ env.PROJECT_VERSION || '2.0.0' }}"
              BuildDate = "${{ env.BUILD_DATE }}"
              GitCommit = "${{ env.GIT_SHA }}"
          } | ConvertTo-Json
          Set-Content -Path "$distDir/version.json" -Value $versionInfo

      - name: Optimize Binaries
        shell: pwsh
        continue-on-error: true
        run: |
          if (-not (Test-Path "./upx.exe")) {
              $ProgressPreference = 'SilentlyContinue'
              Invoke-WebRequest "https://github.com/upx/upx/releases/download/v${{ env.UPX_VERSION }}/upx-${{ env.UPX_VERSION }}-win64.zip" -OutFile upx.zip
              Expand-Archive upx.zip -DestinationPath upx_tmp
              Move-Item upx_tmp/upx*/upx.exe . -ErrorAction SilentlyContinue
              Remove-Item upx_tmp, upx.zip -Recurse -Force
          }

          # 压缩主程序（忽略错误）
          ./upx.exe --best --lzma ./build/main.dist/aumiao.exe 2>&1 | Tee-Object -FilePath "$pwd/build/upx-main.log" || Write-Host "UPX compression warning (ignored)"

          # 压缩DLL文件（跳过已知问题文件）
          $excludeDlls = @("vcruntime140.dll", "vcruntime140_1.dll")
          Get-ChildItem ./build/main.dist/*.dll | Where-Object { 
              $_.Name -notin $excludeDlls 
          } | ForEach-Object {
              ./upx.exe --best --lzma $_.FullName 2>&1 | Tee-Object -FilePath "$pwd/build/upx-dll.log" -Append
          }

      - name: Package Artifacts
        shell: pwsh
        run: |
          $packageName = "Aumiao_v${{ env.PROJECT_VERSION || '2.0.0' }}.${{ env.BUILD_DATE }}_alpha.zip"
          $distDir = Resolve-Path "./build/main.dist"
          7z a -tzip "$(Resolve-Path "./build")/$packageName" "$distDir\*"

      - name: Upload Release Package
        uses: actions/upload-artifact@v4
        with:
          name: Aumiao_v${{ env.PROJECT_VERSION || '2.0.0' }}.${{ env.BUILD_DATE }}
          path: build/*.zip
          retention-days: 7

      - name: Upload Debug Files
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Build_Debug_${{ env.BUILD_DATE }}
          path: |
            build/**/*.log
            build/**/*.json
            **/nuitka-*.log
            **/nuitka-*.xml
          if-no-files-found: ignore
          retention-days: 14