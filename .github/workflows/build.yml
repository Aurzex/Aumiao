name: Build and Package with Nuitka

permissions:
  contents: write
  actions: write

on:
  push:
    branches: [main]
    paths:
      - ".github/workflows/build.yml"
      - "Aumiao-py/src/**/*.py"
      - "Aumiao-py/pyproject.toml"
  pull_request:
    branches: [main]
    paths:
      - ".github/workflows/build.yml"
      - "Aumiao-py/src/**/*.py"
      - "Aumiao-py/pyproject.toml"
  workflow_dispatch:

env:
  # 构建配置
  BUILD_TYPE: Release
  COMMIT_INTERVAL: 20
  
  # Python 环境
  PYTHON_VERSION: "3.13"
  PYTHON_ARCH: "x64"
  
  # 工具版本
  UV_VERSION: "0.9.3"
  UPX_VERSION: "5.0.2"
  NUITKA_VERSION: "2.3.2"
  
  # 系统工具版本
  SEVEN_ZIP_VERSION: "25.1"
  INNOSETUP_VERSION: "6.5.4"
  
  # 构建参数
  BUILD_JOBS: 4
  LTO_MODE: "yes"
  COMPRESSION_LEVEL: "best"
  
  # 公司信息
  COMPANY_NAME: "Aumiao Team"
  PRODUCT_NAME: "Aumiao"
  COPYRIGHT_YEAR: "2025"
  
  # 目录配置
  PROJECT_DIR: "Aumiao-py"
  BUILD_DIR: "build"
  DIST_DIR: "build/main.dist"
  
  # 时间配置
  TIMEZONE: "Asia/Shanghai"

jobs:
  check-release-condition:
    name: "Check Release Condition"
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.check-commits.outputs.should_release }}
      release_tag: ${{ steps.check-commits.outputs.release_tag }}
      commit_count: ${{ steps.check-commits.outputs.commit_count }}
      latest_tag: ${{ steps.check-commits.outputs.latest_tag }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check Commit Count and Create Release
        id: check-commits
        run: |
          echo "开始提交计数分析"
          
          # 获取完整标签历史
          git fetch --tags --depth=100
          
          # 方法1：按版本号排序（适用于时间戳格式）
          LATEST_TAG_VERSION=$(git tag -l "v*" --sort=-version:refname | head -n 1)
          echo "版本排序最新标签: $LATEST_TAG_VERSION"
          
          # 方法2：按创建时间排序
          LATEST_TAG_DATE=$(git tag -l "v*" --sort=-creatordate | head -n 1)
          echo "时间排序最新标签: $LATEST_TAG_DATE"
          
          # 选择最可能正确的标签
          if [ -n "$LATEST_TAG_VERSION" ] && [ -n "$LATEST_TAG_DATE" ]; then
              if [ "$LATEST_TAG_VERSION" = "$LATEST_TAG_DATE" ]; then
                  LATEST_TAG="$LATEST_TAG_VERSION"
                  echo "版本和时间排序一致，使用: $LATEST_TAG"
              else
                  LATEST_TAG="$LATEST_TAG_VERSION"
                  echo "排序结果不一致，优先使用版本排序: $LATEST_TAG"
              fi
          elif [ -n "$LATEST_TAG_VERSION" ]; then
              LATEST_TAG="$LATEST_TAG_VERSION"
              echo "使用版本排序标签: $LATEST_TAG"
          elif [ -n "$LATEST_TAG_DATE" ]; then
              LATEST_TAG="$LATEST_TAG_DATE"
              echo "使用时间排序标签: $LATEST_TAG"
          else
              LATEST_TAG=""
              echo "没有找到任何标签"
          fi
          
          # 计算提交数量
          if [ -n "$LATEST_TAG" ]; then
              # 验证标签是否在当前分支历史中
              if git merge-base --is-ancestor "$LATEST_TAG" HEAD 2>/dev/null; then
                  COMMIT_COUNT=$(git rev-list --count "$LATEST_TAG..HEAD")
                  echo "从标签 $LATEST_TAG 到 HEAD 的提交数: $COMMIT_COUNT"
              else
                  echo "标签 $LATEST_TAG 不在当前分支历史中，重新计算"
                  COMMIT_COUNT=$(git rev-list --count HEAD)
              fi
          else
              echo "没有标签，计算所有提交"
              COMMIT_COUNT=$(git rev-list --count HEAD)
          fi
          
          echo "提交数量: $COMMIT_COUNT"
          echo "发版阈值: ${{ env.COMMIT_INTERVAL }}"
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "commit_count=$COMMIT_COUNT" >> $GITHUB_OUTPUT
          
          # 决策逻辑
          if [ $COMMIT_COUNT -ge ${{ env.COMMIT_INTERVAL }} ]; then
              echo "达到发版条件 ($COMMIT_COUNT >= ${{ env.COMMIT_INTERVAL }})，触发发布"
              echo "should_release=true" >> $GITHUB_OUTPUT
              
              RELEASE_TAG="v$(date +'%Y%m%d.%H%M%S')"
              echo "release_tag=$RELEASE_TAG" >> $GITHUB_OUTPUT
              
              # 创建并推送标签
              git tag $RELEASE_TAG
              git push origin $RELEASE_TAG
              echo "创建并推送新标签: $RELEASE_TAG"
          else
              echo "未达到发版条件 ($COMMIT_COUNT < ${{ env.COMMIT_INTERVAL }})，跳过发布"
              echo "should_release=false" >> $GITHUB_OUTPUT
              echo "release_tag=" >> $GITHUB_OUTPUT
          fi

  generate-changelog:
    name: "Generate Changelog"
    runs-on: ubuntu-latest
    needs: check-release-condition
    if: needs.check-release-condition.outputs.should_release == 'true'
    outputs:
      release_body: ${{ steps.git-cliff.outputs.content }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate Changelog with git-cliff
        uses: orhun/git-cliff-action@v4
        id: git-cliff
        with:
          config: ./${{ env.PROJECT_DIR }}/cliff.toml
          args: -vv --latest --strip header
        env:
          OUTPUT: CHANGES.md

      - name: Display Changelog Summary
        run: |
          echo "生成的变更日志摘要"
          if [ -f CHANGES.md ]; then
            head -20 CHANGES.md
            echo "变更日志长度: $(wc -l < CHANGES.md) 行"
          else
            echo "未生成变更日志文件"
          fi

  build-application:
    name: "Build Application"
    permissions:
      contents: write
      actions: write
    runs-on: windows-latest
    timeout-minutes: 30
    needs: check-release-condition
    if: |
      needs.check-release-condition.outputs.should_release == 'true' ||
      github.event_name == 'workflow_dispatch' ||
      github.event_name == 'pull_request'
    
    env:
      UV_CACHE_DIR: "${{ github.workspace }}/.uv-cache"

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Build Environment
        id: setup-env
        shell: bash
        run: |
          echo "BUILD_DATE=$(TZ=${{ env.TIMEZONE }} date +'%y%m%d')" >> $GITHUB_ENV
          echo "BUILD_TIME=$(TZ=${{ env.TIMEZONE }} date +'%H%M%S')" >> $GITHUB_ENV
          echo "GIT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          echo "SHOULD_RELEASE=${{ needs.check-release-condition.outputs.should_release }}" >> $GITHUB_ENV
          echo "RELEASE_TAG=${{ needs.check-release-condition.outputs.release_tag }}" >> $GITHUB_ENV
          echo "COMMIT_COUNT=${{ needs.check-release-condition.outputs.commit_count }}" >> $GITHUB_ENV
          echo "LATEST_TAG=${{ needs.check-release-condition.outputs.latest_tag }}" >> $GITHUB_ENV
          echo "BUILD_DATE=$(TZ=${{ env.TIMEZONE }} date +'%y%m%d')" >> $GITHUB_OUTPUT

      - name: Read Project Version
        id: version
        shell: pwsh
        run: |
          $tomlContent = Get-Content -Path ./${{ env.PROJECT_DIR }}/pyproject.toml -Raw -Encoding UTF8
          $versionLine = $tomlContent | Select-String -Pattern 'version\s*=\s*"([\d.]+)"'
          if ($versionLine) {
              $version = $versionLine.Matches.Groups[1].Value
              Write-Host "提取的项目版本: $version"
              Write-Output "PROJECT_VERSION=$version" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
          } else {
              Write-Error "在 pyproject.toml 中未找到版本号"
              exit 1
          }

      - name: Install 7-Zip via Chocolatey
        uses: crazy-max/ghaction-chocolatey@v3
        with:
          args: install 7zip -y --version ${{ env.SEVEN_ZIP_VERSION }} --allow-downgrade

      - name: Install Inno Setup via Chocolatey
        uses: crazy-max/ghaction-chocolatey@v3
        with:
          args: install innosetup -y --version ${{ env.INNOSETUP_VERSION }} --allow-downgrade

      - name: Install uv and Python
        uses: astral-sh/setup-uv@v6
        with:
          version: ${{ env.UV_VERSION }}
          enable-cache: true
          cache-dependency-glob: |
            ${{ env.PROJECT_DIR }}/pyproject.toml
            ${{ env.PROJECT_DIR }}/uv.lock

      - name: Set up Python
        run: uv python install ${{ env.PYTHON_VERSION }}

      - name: Cache Build Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.UV_CACHE_DIR }}
            upx.exe
          key: ${{ runner.os }}-py${{ env.PYTHON_VERSION }}-uv-${{ env.UV_VERSION }}-${{ hashFiles(format('{0}/{1}', env.PROJECT_DIR, 'pyproject.toml'), format('{0}/{1}', env.PROJECT_DIR, 'uv.lock')) }}
          restore-keys: |
            ${{ runner.os }}-py${{ env.PYTHON_VERSION }}-uv-${{ env.UV_VERSION }}-

      - name: Install Project Dependencies
        working-directory: ./${{ env.PROJECT_DIR }}
        run: |
          uv lock
          uv sync --all-extras --dev
          uv pip install nuitka==${{ env.NUITKA_VERSION }}

      - name: Build with Nuitka
        working-directory: ./${{ env.PROJECT_DIR }}
        run: |
          echo "开始 Nuitka 编译"
          uv run python -m nuitka `
            --assume-yes-for-downloads `
            --company-name="${{ env.COMPANY_NAME }}" `
            --copyright="Copyright © ${{ env.COPYRIGHT_YEAR }} 喵鱼a. All rights reserved." `
            --file-version="${{ env.PROJECT_VERSION }}" `
            --follow-imports `
            --jobs=${{ env.BUILD_JOBS }} `
            --lto=${{ env.LTO_MODE }} `
            --mode=standalone `
            --output-dir=../${{ env.BUILD_DIR }} `
            --output-filename=aumiao `
            --product-name="${{ env.PRODUCT_NAME }}" `
            --product-version="${{ env.PROJECT_VERSION }}" `
            --show-progress `
            --windows-console-mode=force `
            --windows-icon-from-ico="./resource/icons/favicon.ico" `
            ./main.py
          echo "Nuitka 编译完成"

      - name: Run Recovery Script
        working-directory: ./${{ env.PROJECT_DIR }}
        run: |
          echo "运行恢复脚本"
          uv run python recover.py
          echo "恢复脚本执行完成"

      - name: Prepare Distribution Files
        shell: pwsh
        run: |
          $distDir = "${{ env.DIST_DIR }}"
          Write-Host "准备分发文件到: $distDir"
          
          # 创建必要的目录
          New-Item -Path "$distDir/.log" -ItemType Directory -Force
          
          # 复制必要文件
          $essentialFiles = @(
              "./${{ env.PROJECT_DIR }}/README.md",
              "./${{ env.PROJECT_DIR }}/DISCLAIMER.txt",
              "./${{ env.PROJECT_DIR }}/data"
          )
          foreach ($file in $essentialFiles) {
              if (Test-Path $file) {
                  Copy-Item -Path $file -Destination $distDir -Recurse -Force
                  Write-Host "复制: $file"
              } else {
                  Write-Warning "文件不存在: $file"
              }
          }
          
          # 创建版本信息文件
          $versionInfo = @{
              Version = "${{ env.PROJECT_VERSION }}"
              BuildDate = "${{ env.BUILD_DATE }}"
              BuildTime = "${{ env.BUILD_TIME }}"
              GitCommit = "${{ env.GIT_SHA }}"
              ReleaseTag = "${{ env.RELEASE_TAG }}"
              CommitCount = "${{ env.COMMIT_COUNT }}"
              PreviousTag = "${{ env.LATEST_TAG }}"
              PythonVersion = "${{ env.PYTHON_VERSION }}"
              BuildTools = @{
                  Nuitka = "${{ env.NUITKA_VERSION }}"
                  UPX = "${{ env.UPX_VERSION }}"
                  UV = "${{ env.UV_VERSION }}"
              }
              BuildInfo = @{
                  Type = "${{ env.BUILD_TYPE }}"
                  LTO = "${{ env.LTO_MODE }}"
                  Jobs = "${{ env.BUILD_JOBS }}"
              }
          } | ConvertTo-Json -Depth 4
          
          Set-Content -Path "$distDir/version.json" -Value $versionInfo
          Write-Host "创建版本信息文件"

      - name: Optimize Binaries with UPX
        shell: pwsh
        continue-on-error: true
        run: |
          Write-Host "开始 UPX 二进制优化"
          if (-not (Test-Path "./upx.exe")) {
              Write-Host "下载 UPX 版本 ${{ env.UPX_VERSION }}"
              $ProgressPreference = 'SilentlyContinue'
              try {
                  Invoke-WebRequest "https://github.com/upx/upx/releases/download/v${{ env.UPX_VERSION }}/upx-${{ env.UPX_VERSION }}-win64.zip" -OutFile upx.zip
                  Expand-Archive upx.zip -DestinationPath upx_tmp -Force
                  $upxDir = Get-ChildItem upx_tmp -Directory | Select-Object -First 1
                  Move-Item "$upxDir/upx.exe" . -Force
                  Remove-Item upx_tmp, upx.zip -Recurse -Force
                  Write-Host "UPX 下载完成"
              } catch {
                  Write-Warning "UPX 下载失败: $($_.Exception.Message)"
                  exit 0
              }
          }
          
          $exePath = "${{ env.DIST_DIR }}/aumiao.exe"
          if (Test-Path $exePath) {
              Write-Host "使用 UPX 压缩: $exePath (级别: ${{ env.COMPRESSION_LEVEL }})"
              $originalSize = (Get-Item $exePath).Length
              ./upx.exe --${{ env.COMPRESSION_LEVEL }} --lzma "$exePath"
              $compressedSize = (Get-Item $exePath).Length
              $reduction = ($originalSize - $compressedSize) / 1MB
              Write-Host "压缩完成: 减少了 $([math]::Round($reduction, 2)) MB"
          } else {
              Write-Warning "未找到可执行文件: $exePath"
          }

      - name: Create Portable Zip Package
        shell: pwsh
        run: |
          Write-Host "创建便携版 ZIP 包"
          $packageName = "${{ env.PRODUCT_NAME }}_Portable_v${{ env.PROJECT_VERSION }}.${{ env.BUILD_DATE }}.zip"
          $zipPath = "${{ env.BUILD_DIR }}/$packageName"
          
          # 切换到分发目录的父目录
          Set-Location "${{ env.DIST_DIR }}/.."
          
          # 压缩 main.dist 目录内容
          7z a -tzip "${{ github.workspace }}/$zipPath" "main.dist/*" -mx=9
          
          if (Test-Path "${{ github.workspace }}/$zipPath") {
              $zipSize = (Get-Item "${{ github.workspace }}/$zipPath").Length / 1MB
              Write-Host "创建便携版包: $packageName ($([math]::Round($zipSize, 2)) MB)"
          } else {
              Write-Error "ZIP 包创建失败"
              exit 1
          }

      - name: Build Installer
        shell: pwsh
        run: |
          Write-Host "构建安装程序"
          $issPath = "./${{ env.PROJECT_DIR }}/resource/aumiao.iss"
          if (Test-Path $issPath) {
              ISCC.exe $issPath
              Write-Host "安装程序构建成功"
          } else {
              Write-Warning "未找到 Inno Setup 脚本: $issPath"
          }

      - name: Upload Portable Package to Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PRODUCT_NAME }}-Portable-${{ env.BUILD_DATE }}
          path: ${{ env.BUILD_DIR }}/*.zip
          retention-days: 30
        if: success()

      - name: Upload Installer to Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PRODUCT_NAME }}-Installer-${{ env.BUILD_DATE }}
          path: ${{ env.PROJECT_DIR }}/Output/*.exe
          retention-days: 30
        if: success()

      - name: Minimize UV Cache
        run: uv cache prune --ci
        if: always()

    outputs:
      build_date: ${{ steps.setup-env.outputs.BUILD_DATE }}

  publish-release:
    name: "Publish Release"
    runs-on: ubuntu-latest
    needs: [check-release-condition, generate-changelog, build-application]
    if: needs.check-release-condition.outputs.should_release == 'true'
    permissions:
      contents: write
    steps:
      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: ${{ env.PRODUCT_NAME }}-*
          path: ./release-assets
          merge-multiple: true

      - name: List Release Assets
        run: |
          echo "发布资源列表"
          find ./release-assets -type f -name "*" | while read file; do
            size=$(du -h "$file" | cut -f1)
            echo "资源: $file ($size)"
          done

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.check-release-condition.outputs.release_tag }}
          name: "${{ env.PRODUCT_NAME }} ${{ needs.check-release-condition.outputs.release_tag }}"
          body: |
            ${{ needs.generate-changelog.outputs.release_body }}
            
            ## 构建信息
            - 版本: ${{ env.PROJECT_VERSION }}
            - 提交: ${{ env.GIT_SHA }}
            - 构建时间: ${{ env.BUILD_DATE }} ${{ env.BUILD_TIME }}
            - 提交数量: ${{ env.COMMIT_COUNT }}
            - 前一个标签: ${{ env.LATEST_TAG }}
          files: |
            ./release-assets/**/*
          draft: false
          prerelease: false

  upload-debug-files:
    name: "Upload Debug Files"
    runs-on: windows-latest
    needs: build-application
    if: always()
    steps:
      - name: Upload Build Logs
        uses: actions/upload-artifact@v4
        with:
          name: Build-Debug-Logs-${{ needs.build-application.outputs.build_date }}
          path: |
            ${{ env.BUILD_DIR }}/**/*.log
            ${{ env.BUILD_DIR }}/**/*.json
            **/nuitka-*.log
            ${{ env.DIST_DIR }}/version.json
          if-no-files-found: ignore
          retention-days: 14