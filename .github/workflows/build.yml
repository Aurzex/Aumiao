name: Nightly Build with Nuitka

on:
  push:
    branches: [main]
    paths-ignore:
      - "**.md"
      - ".gitignore"
      - "LICENSE"
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.13"
  UPX_VERSION: "4.2.4"
  BUILD_DIR: "build"
  TZ: "Asia/Shanghai"
  VENV_DIR: ".venv"
  
jobs:
  build:
    runs-on: windows-latest
    timeout-minutes: 40

    steps:
      # ========== 基础配置 ==========
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          architecture: x64
          #cache: "uv"
          
      # ========== 缓存优化配置 ==========
      - name: Cache dependencies
        uses: actions/cache@v4
        id: dep-cache
        with:
          path: |
            ${{ env.VENV_DIR }}
            ~/.cache/pip
            ~/.cache/uv
          key: ${{ runner.os }}-deps-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-deps-

      # ========== 依赖安装优化 ==========
      - name: Install UV
        uses: astral-sh/setup-uv@v5
        with:
          version: "latest"

      - name: Install Dependencies
        run: |
          python -m venv ${{ env.VENV_DIR }}
          .\${{ env.VENV_DIR }}\Scripts\activate
          uv pip install -r ./Aumiao-py/src/project/requirements.txt
        if: steps.dep-cache.outputs.cache-hit != 'true'


      - name: Get Build Metadata
        id: version
        run: |
          $buildDate = (Get-Date).ToString("yyyyMMdd-HHmm")
          echo "BUILD_DATE=$buildDate" >> $env:GITHUB_OUTPUT
          echo "GIT_SHA=$(git rev-parse --short HEAD)" >> $env:GITHUB_OUTPUT
        shell: pwsh

      # ========== Nuitka 构建优化 ==========
      - name: Build with Nuitka
        uses: Nuitka/Nuitka-Action@main
        continue-on-error: true
        with:
          nuitka-version: "latest"  # 使用最新版本
          script-name: ./Aumiao-py/main.py
          mode: standalone
          company-name: "Aumiao Team"
          product-name: "Aumiao"
          file-version: "2.0.0"
          product-version: "2.0.0"
          file-description: "Build: ${{ steps.version.outputs.BUILD_DATE }} (${{ steps.version.outputs.GIT_SHA }})"
          copyright: "Copyright © 2025 喵鱼a. All rights reserved."
          windows-icon-from-ico: "./Aumiao-py/src/project/favicon.ico"
          output-dir: ${{ env.BUILD_DIR }}
          jobs: 4
          lto: "yes"
          follow-imports: true
          assume-yes-for-downloads: true
          remove-output: true

      # ========== UPX 压缩 ==========
      - name: Setup UPX
        uses: crazy-max/ghaction-upx@v2
        with:
          version: ${{ env.UPX_VERSION }}

      - name: Compress Binaries
        continue-on-error: true
        run: |
          $retryCount = 0
          Get-ChildItem "${{ env.BUILD_DIR }}" -Recurse -Include *.exe, *.dll | ForEach-Object {
            while ($retryCount -lt 2) {
              try {
                upx --best --lzma $_.FullName
                break
              } catch {
                $retryCount++
                Start-Sleep -Seconds 5
              }
            }
          }

      # ========== 文件处理 ==========
      - name: Prepare Distribution
        run: |
          $distDir = "${{ env.BUILD_DIR }}/main.dist"
          New-Item "$distDir/.log" -ItemType Directory -Force | Out-Null
          
          # 使用哈希表管理文件列表
          $filesToCopy = @{
            Docs = @("./Aumiao-py/README.txt", "./Aumiao-py/DISCLAIMER.txt")
            Data = @("./Aumiao-py/data")
          }

          $filesToCopy.Docs | Copy-Item -Destination $distDir -Force
          $filesToCopy.Data | Copy-Item -Destination $distDir -Recurse -Force

      # ========== 打包与上传 ==========
      - name: Create Artifact
        run: |
          $timestamp = "${{ steps.version.outputs.BUILD_DATE }}"
          $zipName = "Aumiao-${timestamp}-${{ steps.version.outputs.GIT_SHA }}-win64.zip"
          7z a -tzip "${{ env.BUILD_DIR }}/$zipName" "${{ env.BUILD_DIR }}/main.dist/*" -mx9

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: "Aumiao_${{ steps.version.outputs.BUILD_DATE }}_${{ steps.version.outputs.GIT_SHA }}"
          path: ${{ env.BUILD_DIR }}/Aumiao-*.zip
          retention-days: 7

      - name: Archive Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: BuildLogs_${{ steps.version.outputs.BUILD_DATE }}
          path: ${{ env.BUILD_DIR }}/**/*.log