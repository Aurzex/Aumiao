name: Build and Package with Nuitka

permissions:
  contents: read
  actions: write

on:
  push:
    branches: [main]
    paths:
      - ".github/workflows/build.yml"
      - "Aumiao-py/src/**/*.py"
      - "Aumiao-py/pyproject.toml"
  pull_request:
    branches: [main]
    paths:
      - ".github/workflows/build.yml"
      - "Aumiao-py/src/**/*.py"
      - "Aumiao-py/pyproject.toml"
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.13"
  UPX_VERSION: "4.2.4"
  BUILD_TYPE: Release

jobs:
  build:
    permissions:
      contents: read
      actions: write
    runs-on: windows-latest
    timeout-minutes: 30

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Beijing Timezone
        shell: bash
        run: |
          echo "BUILD_DATE=$(TZ=Asia/Shanghai date +'%y%m%d')" >> $GITHUB_ENV
          echo "BUILD_TIME=$(TZ=Asia/Shanghai date +'%H%M%S')" >> $GITHUB_ENV
          echo "GIT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Read Project Version
        id: version
        shell: pwsh
        run: |
          try {
            $version = (Get-Content -Path ./Aumiao-py/pyproject.toml -Raw | 
                       Select-String -Pattern 'version\s*=\s*"([\d.]+)"').Matches.Groups[1].Value
            if (-not $version) {
              throw "Version not found in pyproject.toml"
            }
            Write-Host "Extracted version: $version"
            Write-Output "PROJECT_VERSION=$version" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
          } catch {
            Write-Error "Failed to extract version: $($_.Exception.Message)"
            exit 1
          }

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          version: "0.7.4"
          enable-cache: true

      - name: Set Python version from pyproject.toml
        shell: bash
        run: |
          # 从 pyproject.toml 提取 Python 版本要求
          PYTHON_VERSION=$(grep -E 'requires-python' ./Aumiao-py/pyproject.toml | grep -oE '[0-9]+\.[0-9]+' | head -1)
          if [ -z "$PYTHON_VERSION" ]; then
            PYTHON_VERSION="3.13"  # 默认值
          fi
          echo "PYTHON_VERSION=$PYTHON_VERSION" >> $GITHUB_ENV

      - name: Install Python with uv
        run: |
          uv python install ${{ env.PYTHON_VERSION }}

      - name: Download UPX if not cached
        if: env.CACHE_MISS == 'true'
        shell: pwsh
        run: |
          $ProgressPreference = 'SilentlyContinue'
          Invoke-WebRequest "https://github.com/upx/upx/releases/download/v${{ env.UPX_VERSION }}/upx-${{ env.UPX_VERSION }}-win64.zip" -OutFile upx.zip
          Expand-Archive upx.zip -DestinationPath upx_tmp
          Move-Item upx_tmp/upx*/upx.exe . -ErrorAction SilentlyContinue
          Remove-Item upx_tmp, upx.zip -Recurse -Force

      - name: Install 7-Zip
        shell: pwsh
        run: |
          $ProgressPreference = 'SilentlyContinue'
          Invoke-WebRequest -Uri "https://www.7-zip.org/a/7z2409-x64.msi" -OutFile "7z-installer.msi"
          Start-Process msiexec.exe -ArgumentList "/i 7z-installer.msi /quiet" -Wait
          $sevenZipPath = "C:\Program Files\7-Zip"
          if (Test-Path $sevenZipPath) {
              "$sevenZipPath" | Out-File -FilePath $env:GITHUB_PATH -Append -Encoding utf8
              $env:PATH += ";$sevenZipPath"
          } else {
              Write-Error "7-Zip installation failed!"
              exit 1
          }

      - name: Install Dependencies
        run: |
          cd Aumiao-py
          uv sync --locked --no-dev

      - name: Build with Nuitka
        uses: Nuitka/Nuitka-Action@main
        env:
          NUITKA_VERBOSE: 1
        with:
          assume-yes-for-downloads: true
          company-name: "Aumiao Team"
          copyright: "Copyright © 2025 喵鱼a. All rights reserved."
          file-version: ${{ env.PROJECT_VERSION || '2.0.0' }}
          follow-imports: true
          jobs: 4
          lto: "yes"
          mode: standalone
          output-dir: build
          output-filename: aumiao
          product-name: "Aumiao"
          product-version: ${{ env.PROJECT_VERSION || '2.0.0' }}
          script-name: ./Aumiao-py/main.py
          show-progress: true
          windows-console-mode: force
          windows-icon-from-ico: "./Aumiao-py/resource/icons/favicon.ico"
          remove-output: true
          nofollow-import-to: "test,tests"

      - name: Run recover.py
        run: |
          uv run python ./Aumiao-py/recover.py

      - name: Prepare Distribution
        shell: pwsh
        run: |
          $distDir = "build/main.dist"
          New-Item -Path "$distDir/.log" -ItemType Directory -Force
          $essentialFiles = @(
              "./Aumiao-py/README.txt",
              "./Aumiao-py/DISCLAIMER.txt",
              "./Aumiao-py/data"
          )
          Copy-Item -Path $essentialFiles -Destination $distDir -Recurse -Force
          $versionInfo = @{
              Version   = "${{ env.PROJECT_VERSION || '2.0.0' }}"
              BuildDate = "${{ env.BUILD_DATE }}"
              GitCommit = "${{ env.GIT_SHA }}"
          } | ConvertTo-Json
          Set-Content -Path "$distDir/version.json" -Value $versionInfo

      - name: Optimize Binaries
        shell: pwsh
        continue-on-error: true
        run: |
          if (Test-Path "./upx.exe") {
              # 压缩主程序（忽略错误）
              ./upx.exe --best --lzma ./build/main.dist/aumiao.exe 2>&1 | Tee-Object -FilePath "$pwd/build/upx-main.log" || Write-Host "UPX compression warning (ignored)"

              # 压缩DLL文件（跳过已知问题文件）
              $excludeDlls = @("vcruntime140.dll", "vcruntime140_1.dll")
              Get-ChildItem ./build/main.dist/*.dll | Where-Object { 
                  $_.Name -notin $excludeDlls 
              } | ForEach-Object {
                  ./upx.exe --best --lzma $_.FullName 2>&1 | Tee-Object -FilePath "$pwd/build/upx-dll.log" -Append
              }
          } else {
              Write-Host "UPX not available, skipping compression"
          }

      - name: Cleanup Build Artifacts
        shell: pwsh
        run: |
          Remove-Item -Recurse -Force build/*.build 2>$null
          Remove-Item -Recurse -Force build/*.dist/.log 2>$null
          Get-ChildItem -Path build -Include __pycache__ -Recurse -Directory | Remove-Item -Recurse -Force
          Get-ChildItem -Path build -Include *.pyc -Recurse -File | Remove-Item -Force

      - name: Package Artifacts
        shell: pwsh
        run: |
          $packageName = "Aumiao_v${{ env.PROJECT_VERSION || '2.0.0' }}.${{ env.BUILD_DATE }}_alpha.zip"
          $distDir = Resolve-Path "./build/main.dist"
          7z a -tzip "$(Resolve-Path "./build")/$packageName" "$distDir\*"

      - name: Upload Release Package
        uses: actions/upload-artifact@v4
        with:
          name: Aumiao_v${{ env.PROJECT_VERSION || '2.0.0' }}.${{ env.BUILD_DATE }}
          path: build/*.zip
          retention-days: 7

      - name: Upload Debug Files
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Build_Debug_${{ env.BUILD_DATE }}
          path: |
            build/**/*.log
            build/**/*.json
            **/nuitka-*.log
            **/nuitka-*.xml
          if-no-files-found: ignore
          retention-days: 14